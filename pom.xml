<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.consisint</groupId><!-- Nombre de la aplicacion, Ej: AcselE-->
  <artifactId>poc_architecture</artifactId><!-- Nombre del modulo o artefacto, Ej: Core-->
  <name>poc_architecture</name>
  <!-- <packaging>jar</packaging> ***Indicamos el tipo de empaquetado (jar, war, ear, pom) Por default, jar-->
  <version>1.0-SNAPSHOT</version><!-- la versión del proyecto (SNAPSHOT quiere decir que es una versión evolutiva)-->
  <description>Maven Project Test</description>

  <dependencies>
    <!-- https://mvnrepository.com/artifact/junit/junit -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      <!-- <scope>compile</scope> Es el default, Se utiliza en todos los casos (compilar, ejecutar)-->
      <!-- <scope>provided</scope>Se utiliza en todos los casos, pero espera que el jar sea suministrado
                                  por la JDK o el contenedor. Es decir, no se incluirá al empaquetar el proyecto,
                                  ni en el repositorio-->
      <!-- <scope>runtime</scope> No se utiliza para compilar, pero si es necesario para ejecutar-->
      <!-- <scope>system</scope> Es similar a provider pero debemos suministrar el jar nosotros-->
      <!-- <scope>test</scope> Para compilar o ejecutar los test-->

    </dependency>
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>2.5.6</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.2.2</version>
    </dependency>
    <dependency>
      <groupId>org.dbunit</groupId>
      <artifactId>dbunit</artifactId>
      <version>2.4.9</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.9.5</version>
    </dependency>
      <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
      <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
          <version>1.7.25</version>
      </dependency>

    <!-- Para indicar que este proyecto tiene dependencia de otro proyecto nuestro

    <dependency>
        <groupId>com.consisint</groupId>
        <artifactId>Core</artifactId>
        <version>1.0-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>
    -->

    <!-- Para un POM contenedor, indicamos los modulos que lo contendrán

    <modules>
        <module>../Core</module>
        <module>../Web</module>
    </modules>
    -->

  </dependencies>

  <!-- Para establecer herencia, heredan las configuraciones del padre
  <parent>
      <groupId>com.consisint</groupId>
      <artifactId>Acsele</artifactId>
      <version>1.0-SNAPSHOT</version>
  </parent>

  -->

  <!-- Indicamos el nombre del archivo que se genera al empaquetar, Por default: artifactId + version

  <build>
      <finalName>AcseleWeb</finalName>
  </build>
  -->

  <!-- Indicamos perfiles para construccion de proyectos, en este Ej sin debug con optimizacion
  <profiles>
      <profile>
          <id>build-release</id>
          <properties>
              <maven.compiler.debug>false</maven.compiler.debug>
              <maven.compiler.optimize>true</maven.compiler.optimize>
          </properties>
      </profile>
  </profiles>
  -->

  <!-- Para indicar que trabajaremos con control de versiones:

  <scm>
      <connection>scm:svn:svn:http://192.168.1.30:9000/consis/releases/AcseleV13.8-Rural</connection>
      <developerConnection>scm:svn:svn:http://192.168.1.30:9000/consis/releases/AcseleV13.8</developerConnection>
  </scm>
  ...
  <build>
      <plugins>
          <plugin>
              <artifactId>maven-release-plugin</artifactId>
              <configuration>
                  <password>${scm.password}</password>
                  <tagBase>svn://consis/releases/AcseleV13.8/tags</tagBase>
              </configuration>
          </plugin>
      </plugins>
      ...
  </build>

  -->


</project>

        <!-- Ciclo de Vida:
             clean – borra el directorio de salida (target)
             validate - valida que el proyecto esta ok y que toda la informacion necesaria esta disponible
             compile -  compila el proyecto y deja el resultado en target/classes
             test - compila los test y los ejecuta
             package - empaqueta el proyecto y lo dejará en C:/poc_architecture/target/poc_architecture-1.0-SNAPSHOT.jar
             verify - ejecuta y chequea los resultados de los test
             install - guarda el proyecto en el repositorio
                      desde C:\poc_architecture\pom.xml
                      hasta C:\Users\Administrador\.m2\repository\com\consisint\poc_architecture\1.0-SNAPSHOT\poc_architecture-1.0-SNAPSHOT.pom
             site - maneja la creación de la documentación proyecto
             deploy - copia el paquete final en el svn
        -->